AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SNSInvokerSchedule:
    Type: String
    Default: "rate(1 hour)"
    Description: "Harmonogram dla EventBridge Rule (np. rate(5 minutes), rate(1 hour), cron(0 12 * * ? *))"

Resources:
  SNSPublisherLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SNSPublisherLambda
      Runtime: dotnet8
      Handler: SNSPublisherLambda::SNSPublisherLambda.Function::FunctionHandler
      Role: !GetAtt SNSPublisherLambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          SNSTopicArn: !Ref LambdasSNSTopic
          SQSQueueUrl: !Ref LogsProcessingSQS
      Code:
        S3Bucket: cold-start-lambdas
        S3Key: SNSPublisherLambda.zip

  SNSPublisherLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SNSPublisherLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref LambdasSNSTopic
        - PolicyName: SQSSendMessagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt LogsProcessingSQS.Arn

  SNSLambdaInvokerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SNSLambdaInvokerRule
      ScheduleExpression: !Ref SNSInvokerSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt SNSPublisherLambda.Arn
          Id: "LambdaTarget"
          RoleArn: !GetAtt SNSLambdaInvokerRulerRole.Arn
          
          
  SNSLambdaInvokerRulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SNSLambdaInvokerRulePermissionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SNSLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt SNSPublisherLambda.Arn
                
  LambdasSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: LambdasSNSTopic
      Subscription:
      ### dotnet
        - Endpoint: !GetAtt TestingLambdaDotnet.Arn
          Protocol: lambda
          
### dotnet          
  TestingLambdaDotnetSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TestingLambdaDotnet
      Principal: sns.amazonaws.com
      SourceArn: !Ref LambdasSNSTopic
      
  TestingLambdaDotnet:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TestingLambdaDotnet
      Runtime: dotnet8
      Handler: TestingLambdaDotnet::TestingLambdaDotnet.Function::FunctionHandler
      Role: !GetAtt TestingLambdaDotnetExecutionRole.Arn
      Timeout: 10
      Code:
        S3Bucket: cold-start-lambdas
        S3Key: TestingLambdaDotnet.zip

  TestingLambdaDotnetExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TestingLambdaDotnetExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
### end

  LogsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: testing-lambdas-logs
    
  LogsProcessingSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: LogsProcessingQueue
      DelaySeconds: 120
      
  LogsProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: dotnet8
      Handler: LogsProcessingLambda::LogsProcessingLambda.Function::FunctionHandler
      Role: !GetAtt LogsProcessingLambdaExecutionRole.Arn
      Timeout: 10
      Code:
        S3Bucket: cold-start-lambdas
        S3Key: LogsProcessingLambda.zip
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt LogsProcessingSQS.Arn
            BatchSize: 1
            
  LogsProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LogsProcessingLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:GetLogEvents"
                Resource: "*"
        - PolicyName: S3BucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:DeleteObject
                    - s3:ListBucket
                Resource: !GetAtt LogsS3Bucket.Arn
        - PolicyName: SQSQueuePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt LogsProcessingSQS.Arn
  